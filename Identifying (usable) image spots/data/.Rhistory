#typical GO will take genes and use a statistical test to see if is enriched with GO terms
# what if you have both up and down regulated genes, what if GO shows in both
#results ranked by FC, will assess if gene sets including GO terms are statistically enriched in up or downregulated genes in one test
# must import the gene sets first
#can be found at the Broad Institute of MSigDB
hallmarks <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/hallmark.genesets.v6.1.symbols.gmt") #50 gene sets
kegg <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/kegg.genesets.v6.1.symbols.gmt") #186
go <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/GOTerms.BP.v6.1.symbols.gmt") #4436
reactome <- fgsea::gmtPathways(C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/reactome.genesets.v6.1.symbols.gmt") #674
#GSEA is a tool for looking at gene sets that are enriched at either extreme of ranked list of genes
#typical GO will take genes and use a statistical test to see if is enriched with GO terms
# what if you have both up and down regulated genes, what if GO shows in both
#results ranked by FC, will assess if gene sets including GO terms are statistically enriched in up or downregulated genes in one test
# must import the gene sets first
#can be found at the Broad Institute of MSigDB
hallmarks <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/hallmark.genesets.v6.1.symbols.gmt") #50 gene sets
kegg <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/kegg.genesets.v6.1.symbols.gmt") #186
go <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/GOTerms.BP.v6.1.symbols.gmt") #4436
reactome <- fgsea::gmtPathways("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/scRNA-seq Webinar/data/reactome.genesets.v6.1.symbols.gmt") #674
gene_sets <- c(hallmarks, kegg, go, reactome)
gene_sets[1]
#organize genes and rank them by logFC
dge_tcells$gene <- rownames(dge_tcells)
dge_tcells <- dge_tcells %>% arrange(desc(avg_logFC))
fold_changes <- dge_tcells$avg_logFC
names(fold_changes) <- dge_tcells$gene
head(fold_changes)
#Run GSEA looking for gene sets that are upregulated or down regulated comparing memory vs.naive T cells, previously ran in chunk 37 (FindMarkers function)
gsea_tcell <- fgsea(pathways = gene_sets,
stats = fold_changes,
minSize=5,
maxSize=5000,
nproc = 2)
#look at significant genes
gsea_sig <- filter(gsea_tcell, padj <= 0.05) %>%
arrange(NES)
head(gsea_sig)
#score each cell for a reference geneset
#get an idea of gene set activity across a population of cells
#average expression levels of each program subtracted from the aggregated expression of a control feature set
#focus on the relative changes between cells
#Looking Interferon gamma response gene set which is down in memory T cells (cluster 1) relative to naive T cels (cluster 3)
seurat <- AddModuleScore(seurat, features=gene_sets["GO_CELLULAR_RESPONSE_TO_INTERFERON_GAMMA"],
name="IFNG_Response")
#this is store in the meta.data table
hist(seurat$IFNG_Response1, breaks=50)
#look at through standard visualization tools the score in our data
FeaturePlot(seurat, features="IFNG_Response1", cols=c('lightgrey', 'red'), order=T)
VlnPlot(seurat, features="IFNG_Response1", pt.size=0.1)
#score is high in cluster 1 and 3
#focus on only those clusters
VlnPlot(seurat, features="IFNG_Response1", idents=c(1,3))
#difference can be seen
#PROGENy tool with a database of 14 pathways
#which signaling pathway may be affected in their data and end up resoting to GO and KEGG pathway enrichments
# these genesets refer to the signaliing proteins rather than the downstram targets of the pathways
#PROGENy a tool that targets 14 signalling pathways it takes expression matrix and scores each sample and an activity level of each pathway
exp_mat <- as.matrix(seurat[["RNA"]]@data)
pathways <- progeny(exp_mat,
scale=T,
organism="Human")
head(pathways)
#add data to our metadata
seurat@meta.data <- cbind(seurat@meta.data, pathways)
#And visualize activities. I’ll just get a list of the different pathways from the column names of that “pathways” variable
RidgePlot(seurat, features = colnames(pathways), ncol = 4)
FeaturePlot(seurat, features="TNFa", cols=c('lightgrey', 'red'), order=T)
#Identifies genes that are expressed according to its spatial location in the abscence of pre-annotation
brain <- FindSpatiallyVariableFeatures(brain, assay = "SCT", features = VariableFeatures(brain)[1:1000],
selection.method = "markvariogram")
#Identify the top 6 features expressed
top.features <- head(SpatiallyVariableFeatures(brain, selection.method = "markvariogram"), 6)
#interactive and adjust the transparency of certain spots
library(Seurat)
SpatialDimPlot(brain, interactive = TRUE)
FindClusters()
?FindClusters()
?FindNeighbors()
install.packages("usethis")
library(usethis)
use_git_config(user.name = "Maliha Mamun", user.email = "malihamamun99@gmail.com")
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
plot1 <- VlnPlot(breast_cancer, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(breast_cancer, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
?save()
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
plot1 <- VlnPlot(breast_cancer, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(breast_cancer, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
save(plot1,plot2,file="spatialcount")
library(Seurat)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
plot1 <- VlnPlot(breast_cancer, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(breast_cancer, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
save(plot1,plot2,file="spatialcount.jpg")
list.files()
getwd()
setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer")
list.files()
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
#breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer",filename = "V1_Breast_Cancer_Block_A_Section_2_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
getwd()
list.files()
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
#breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer")
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer",filename = "V1_Breast_Cancer_Block_A_Section_2_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
#breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer")
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer",filename = "V1_Breast_Cancer_Block_A_Section_2_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
#breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer")
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer",filename = "V1_Breast_Cancer_Block_A_Section_2_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
#InstallData("stxBrain")
library(Seurat)
library(SeuratData)
#setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/Pipeline Spatial Transcriptomics/Breast Cancer V1/data_extracted_files")
#breast_cancer <- LoadData10X("stxBrain", type = "anterior1")
#breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/",filename = "V1_Breast_Cancer_Block_A_Section_1_filtered_feature_bc_matrix.h5", assay = "Spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
setwd("C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer")
breast_cancer <- Load10X_Spatial(data.dir = "C:/Users/malih/Desktop/Summer Spatial Transcriptomics/10X Genomics Datasets/V2_Breast Cancer",filename = "V1_Breast_Cancer_Block_A_Section_2_filtered_feature_bc_matrix.h5", assay = "spatial",slice = "slice1",filter.matrix = TRUE, to.upper = FALSE)
getwd()
setwd("C:/Users/malih/Desktop/Perkins_Lab_ST/")
list.files()
setwd("Identifying (usable) image spots")
list.files()
setwd("data")
list.files()
getwd()
#Load in spot position csv
# Load in spot location CSV file(doesn't have headers)
image_location <- read.csv("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots//data/spatial/tissue_positions_list.csv", header=FALSE)
names(image_location) <- c("barcode", "in_tissue", "array_row", "array_col", "pxl_col_in_fullres_yValue", "pxl_row_in_fullres_xValue")
file_name <- 'data/V1_Breast_Cancer_Block_A_Section_1_image.tif'
#creates a raster object from the tiff image file
#imported_raster <- raster(str_name)
wsi <- brick(file_name)
library(backports)
library(Seurat)
#library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(Matrix)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(readbitmap)
library(hdf5r)
library(data.table)
library(raster)
names(image_location) <- c("barcode", "in_tissue", "array_row", "array_col", "pxl_col_in_fullres_yValue", "pxl_row_in_fullres_xValue")
file_name <- 'data/V1_Breast_Cancer_Block_A_Section_1_image.tif'
library(backports)
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
library(Matrix)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(readbitmap)
library(hdf5r)
library(data.table)
library(hdf5r)
library(data.table)
library(raster)
#Load in spot position csv
# Load in spot location CSV file(doesn't have headers)
image_location <- read.csv("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots//data/spatial/tissue_positions_list.csv", header=FALSE)
names(image_location) <- c("barcode", "in_tissue", "array_row", "array_col", "pxl_col_in_fullres_yValue", "pxl_row_in_fullres_xValue")
#trying to produce image
file_name <- 'data/V1_Breast_Cancer_Block_A_Section_1_image.tif'
#creates a raster object from the tiff image file
#imported_raster <- raster(str_name)
wsi <- brick(file_name)
#Load in spot position csv
# Load in spot location CSV file(doesn't have headers)
image_location <- read.csv("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/spatial/tissue_positions_list.csv", header=FALSE)
names(image_location) <- c("barcode", "in_tissue", "array_row", "array_col", "pxl_col_in_fullres_yValue", "pxl_row_in_fullres_xValue")
#trying to produce image
file_name <- 'data/V1_Breast_Cancer_Block_A_Section_1_image.tif'
#creates a raster object from the tiff image file
#imported_raster <- raster(str_name)
wsi <- brick(file_name)
getwd()
#trying to produce image
file_name <- 'V1_Breast_Cancer_Block_A_Section_1_image.tif'
#trying to produce image
file_name <- 'V1_Breast_Cancer_Block_A_Section_1_image.tif'
#creates a raster object from the tiff image file
#imported_raster <- raster(str_name)
wsi <- brick(file_name)
#check to see the image contains the correct amount of pixels
dim(wsi)
#24240 24240, 3?
plotRGB(wsi)
e <- extent(13091, 13341, 4639, 4889) #xmin, xmax, ymin, ymax
cropped_img <- crop(wsi, e)
plotRGB(cropped_img)
# grabbing only the spots with tissue
image_location <- image_location %>%
filter(in_tissue == 1)
#defining a function to get a cropped spot image given the x and y coordinates of the center of the spot
crop_spot <- function(img, x, y){
e <- extent(x - 136, #using 136 since it is ~half the average distance (273 pixels) between spot centers. We could consider using a different measure to more closely fit to the spot ratius.
x + 136,
y - 136,
y + 136)
cropped_img <- crop(img, e)
return(cropped_img)
}
rotate <- function(x) t(apply(x, 2, rev))
for (i in 1:10)#length(image_location$in_tissue))
{
#crop image to spot
cropped_img <- crop_spot(wsi,
image_location$pxl_row_in_fullres_xValue[i],
image_location$pxl_col_in_fullres_yValue[i])
#edit spot image
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1) <- as.vector(m)
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2) <- as.vector(m)
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3) <- as.vector(m)
#plot spot image
plotRGB(cropped_img) #i <- 2
}
r <- raster(nrow=18, ncol=36)
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1[1,], nrow = 272)
values(r) <- as.vector(t(m))
extent(r) <- extent(0, 360, -90, 90)
rr <- rotate(r)
?values()
?nrow()
#devtools::install_github("satijalab/seurat", ref = "spatial")
library(backports)
library(Seurat)
#library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(Matrix)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(readbitmap)
library(hdf5r)
library(data.table)
# Uninstall seurat
# install backports
# put backports on the R library
# devtools::install_github("satijalab/seurat", ref = "spatial") should work now
# must download file from https://www.xquartz.org/
#library(imager)
library(raster)
rotate <- function(x) t(apply(x, 2, rev))
for (i in 1:10)#length(image_location$in_tissue))
{
#crop image to spot
cropped_img <- crop_spot(wsi,
image_location$pxl_row_in_fullres_xValue[i],
image_location$pxl_col_in_fullres_yValue[i])
#edit spot image
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1) <- as.vector(m)
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2) <- as.vector(m)
m <- matrix(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3, nrow = 272)
m <- rotate(m)
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3) <- as.vector(m)
#plot spot image
plotRGB(cropped_img) #i <- 2
}
r <- raster(nrow=18, ncol=36)
m <- matrix(1:ncell(r), nrow=18)
#took our n matrix, transposed the matrix
values(r) <- as.vector(t(m))
extent(r) <- extent(0, 360, -90, 90)
rr <- rotate(r)
#selecting specific rows from the (red) raster image
cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1[50:100,50:100] <- vector(mode="integer", length=length(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1[50:100,50:100]))
# when looking at the 3 different image chanels in the raster object, image 1 is red, 2 is green, and 3 is blue
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1) <- vector(mode="integer", length=length(values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.1)))
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2) <- vector(mode="integer", length=length(values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.2)))
values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3) <- vector(mode="integer", length=length(values(cropped_img$V1_Breast_Cancer_Block_A_Section_1_image.3)))
#writeRaster(cropped_img, filename='data/testingRaster', format='GTiff', bandorder='BIL', overwrite=TRUE)
#checking the pixel distance between spots
differences <- c()
for (xIndex in seq(3, 127, by=2))
{
for (yIndex in seq(3, 127, by=2))
{
differenceLeft <- image_location$pxl_row_in_fullres_xValue[image_location$array_row == xIndex & image_location$array_col == yIndex] - image_location$pxl_row_in_fullres_xValue[image_location$array_row == xIndex & image_location$array_col == yIndex - 2]
differenceDown <- image_location$pxl_col_in_fullres_yValue[image_location$array_row == xIndex & image_location$array_col == yIndex] - image_location$pxl_col_in_fullres_yValue[image_location$array_row == xIndex - 1 & image_location$array_col == yIndex - 1]
differences <- c(differences, differenceLeft)
append(differences, differenceDown)
}
}
mean(differences)
hist(differences)
?seq()
library(keras)
library(EBImage)
library(stringr)
library(pbapply)
install.packages("EBImage")
install.packages("EBImage")
cifar <- dataset_cifar10()
class_names <- c('airplane', 'automobile', 'bird', 'cat', 'deer',
'dog', 'frog', 'horse', 'ship', 'truck')
index <- 1:30
par(mfcol = c(5,6), mar = rep(1, 4), oma = rep(0.2, 4))
cifar$train$x[index,,,] %>%
purrr::array_tree(1) %>%
purrr::set_names(class_names[cifar$train$y[index] + 1]) %>%
purrr::map(as.raster, max = 255) %>%
purrr::iwalk(~{plot(.x); title(.y)})
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = "relu",
input_shape = c(32,32,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activatio
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = "relu",
input_shape = c(32,32,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu")
summary(model)
# Fix structure for 2d CNN
#6 lines of code below define the network
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = "relu",
input_shape = c(32,32,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu")
# Fix structure for 2d CNN
#6 lines of code below define the network
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = "relu",
input_shape = c(32,32,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu")
summary(model)
model %>%
layer_flatten() %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 10, activation = "softmax")
summary(model)
model %>% compile(
optimizer = "adam",
loss = "sparse_categorical_crossentropy",
metrics = "accuracy"
)
history <- model %>%
fit(
x = cifar$train$x, y = cifar$train$y,
epochs = 10,
validation_data = unname(cifar$test),
verbose = 2
)
plot(history)
evaluate(model, cifar$test$x, cifar$test$y, verbose = 0)
# create a list_data with two lists as its elements
list_data <- list(list1, list2)
install.packages('keras')
install.packages('EBImage')
install.packages("keras")
install.packages('stringr')
install.packages('pbapply')
install.packages("stringr")
install.packages("pbapply")
library(keras)
library(EBImage)
install.packages("readtext")
breast_cancer <- bf_matrix
barcodes <- read.table(file = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/barcodes.tsv", sep = '\t')
features <- read.table(file = "/Users/colten/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/features.tsv", sep = '\t')
features <- read.table(file = "C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/features.tsv", sep = '\t')
library(Matrix)
#This should be read into a more easily understandable table
bf_matrix <- Matrix::readMM("/Users/colten/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
#This should be read into a more easily understandable table
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
#This should be read into a more easily understandable table
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
getwd()
list.files()
setwd("filtered_feature_bc_matrix")
list.files()
setwd("matrix.mtx/")
list.files()
setwd("matrix.mtx")
setwd("matrix.mtx/")
list.files()
list.files()
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
getwd()
#This should be read into a more easily understandable table
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
#This should be read into a more easily understandable table
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx")
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx/matrix.mtx")
colnames(bf_matrix) = barcodes$V1
rownames(bf_matrix) = features$V1
breast_cancer <- bf_matrix
Seurat <- CreateSeuratObject(count = bf_matrix, min.cells = 2, project = Breast_cancer.V1)
memory.limit(24000)
Seurat <- CreateSeuratObject(count = bf_matrix, min.cells = 2, project = Breast_cancer.V1)
Seurat <- CreateSeuratObject(count = bf_matrix, min.cells = 2, project = Breast_cancer.V1)
breast_cancer <- bf_matrix
colnames(bf_matrix) = barcodes$V1
rownames(bf_matrix) = features$V1
bf_matrix <- Matrix::readMM("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/filtered_feature_bc_matrix/matrix.mtx/matrix.mtx")
colnames(bf_matrix) = barcodes$V1
rownames(bf_matrix) = features$V1
breast_cancer <- bf_matrix
Seurat <- CreateSeuratObject(count = bf_matrix, min.cells = 2, project = Breast_cancer.V1)
# Load in spot location CSV file(doesn't have headers)
image_location <- read.csv("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/spatial/tissue_positions_list.csv", header=FALSE)
names(image_location) <- c("barcode", "in_tissue", "array_row", "array_col", "pxl_col_in_fullres_yValue", "pxl_row_in_fullres_xValue")
setwd("C:/Users/malih/Desktop/Perkins_Lab_ST/Identifying (usable) image spots/data/")
file_name <- 'V1_Breast_Cancer_Block_A_Section_1_image.tif'
#creates a raster object from the tiff image file
#imported_raster <- raster(str_name)
wsi <- brick(file_name)
#check to see the image contains the correct amount of pixels
dim(wsi)
plotRGB(wsi)
e <- extent(13091, 13341, 4639, 4889)
cropped_img <- crop(wsi, e)
plotRGB(cropped_img)
# grabbing only the spots with tissue
image_location <- image_location %>%
filter(in_tissue == 1)
#defining a function to get a cropped spot image given the x and y coordinates of the center of the spot
crop_spot <- function(img, x, y){
e <- extent(x - 136, #using 136 since it is ~half the average distance (273 pixels) between spot centers. We could consider using a different measure to more closely fit to the spot ratius.
x + 136,
y - 136,
y + 136)
cropped_img <- crop(img, e)
return(cropped_img)
}
for (i in 1:length(image_location$in_tissue))
{
cropped_img <- crop_spot(wsi,
image_location$pxl_row_in_fullres_xValue[i],
image_location$pxl_col_in_fullres_yValue[i])
#edit spot image
plotRGB(cropped_img)
}
